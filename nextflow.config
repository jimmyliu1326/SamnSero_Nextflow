manifest {
    author = "Jimmy Liu"
    version = "v2.1.0"
    name = "SamnSero"
    homePage = 'https://github.com/jimmyliu1326/SamnSero_Nextflow'
    description = 'Bacterial Genomics Workflow for Infectious Disease Diagnostics and Surveillance'
    mainScript = "main.nf"
    nextflowVersion = ">=23.0.0"
    manifest.defaultBranch = "main"
}

params {
    input = null
    out_dir = './results'
    watchdir = null
    help = null
    qc = false
    annot = null
    trim = null
    nanohq = null
    gpu = null
    version = null
    centrifuge = "/mnt/e/data/reference/centrifuge/"
    noreport = null
    taxon_name = "Salmonella enterica"
    taxon_level = "species"
    medaka_batchsize = 100
    medaka_model = null
    meta = "off"
    // min_binsize = 2000000
    seq_platform = 'nanopore'
    account = null
    // disable_binning = null
    // lca_rank = 'genus'
    // mmseqs_db = "/mnt/e/data/reference/mmseqs2_bacteria"
    watch_cpus = 32
    watch_mode = 'create,modify'
    min_rq = 10
    min_rl = 1000
    min_tr = 3000
    gsize = null
    asm_cov = 150
    nopolish = null
    schema_ignore_params = 'client_fields'
    max_memory = '128.GB'
    max_cpus = 64
    max_time = '120.h'
}

process {
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 18.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 32     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 36.h   * task.attempt, 'time'    ) }
    }
}

// profile definitions
profiles {

    standard {
        includeConfig 'conf/docker.config'
    }

    slurm {
        includeConfig 'conf/slurm.config'
    }

    singularity {
        includeConfig 'conf/singularity.config'
    }

    docker {
        includeConfig 'conf/docker.config'
    }
    
}

// override module default parameters/specifications
includeConfig 'conf/modules.config'
includeConfig 'conf/resources.config'
//includeConfig 'conf/watch.config'

// Trace pipeline execution metrics
timeline {
    enabled = true
    file    = "${params.out_dir}/pipeline_info/execution_timeline.html"
    overwrite = true
}
report {
    enabled = true
    file    = "${params.out_dir}/pipeline_info/execution_report.html"
    overwrite = true
}
trace {
    enabled = true
    file    = "${params.out_dir}/pipeline_info/execution_trace.txt"
    overwrite = true
}
dag {
    enabled = true
    file    = "${params.out_dir}/pipeline_info/pipeline_dag.html"
    overwrite = true
}

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}