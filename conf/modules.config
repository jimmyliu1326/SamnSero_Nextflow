process {

    if ( params.meta != 'off' ) {
        withName: medaka {
            publishDir = [
                path: { "${params.out_dir}/assembly/${sample_id.replaceAll('_BIN_.*', '')}/bins/" },
                mode: "copy"
            ]
        }
        withName: medaka_gpu {
            publishDir = [
                path: { "${params.out_dir}/assembly/${sample_id.replaceAll('_BIN_.*', '')}/bins/" },
                mode: "copy"                
            ]
        }
    }

    if ( params.watchdir ) {

        withName: dragonflye {
            publishDir = [
                [
                    path: { "${params.out_dir}/timepoints/${sample_id.replaceAll('_TIME_.*', '')}/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    pattern: "*.{log,txt,gfa}"
                ],
                [
                    path: { "${params.out_dir}/latest/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    pattern: "*.{log,txt,gfa}"
                ]
            ]
            // beforeScript = { "workdir=\$PWD; cd ${launchDir}; dir='${params.out_dir}/timepoints/${sample_id.replaceAll('_TIME_.*', '')}/assembly/${sample_id.replaceAll('.*_TIME_', '')}/'; mkdir -p \$dir; echo 1 > \$dir/assembly.txt; cd \$workdir" }
            maxForks = params.watch_cpus.intdiv(16)
        }
        withName: flye {
            publishDir = [
                [
                    path: { "${params.out_dir}/timepoints/${sample_id.replaceAll('_TIME_.*', '')}/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    pattern: "*.{log,txt,gfa}"
                ],
                [
                    path: { "${params.out_dir}/latest/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    pattern: "*.{txt,gfa}",
                    saveAs: { f -> 
                        f.endsWith('.gfa') ? sample_id.replaceAll('.*_TIME_', '') + '.gfa' : f
                    }
                ]
            ]
            // beforeScript = { "workdir=\$PWD; cd ${launchDir}; dir='${params.out_dir}/timepoints/${sample_id.replaceAll('_TIME_.*', '')}/assembly/${sample_id.replaceAll('.*_TIME_', '')}/'; mkdir -p \$dir; echo 1 > \$dir/assembly.txt; cd \$workdir" }
            maxForks = params.watch_cpus.intdiv(16)
            ext.args = '-i 0'
        }
        withName: metaflye {
            publishDir = [
                [
                    path: { "${params.out_dir}/timepoints/${sample_id.replaceAll('_TIME_.*', '')}/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    pattern: "*.{log,txt,gfa}"
                ],
                [
                    path: { "${params.out_dir}/latest/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    pattern: "*.{txt,gfa}",
                    saveAs: { f -> 
                        f.endsWith('.gfa') ? sample_id.replaceAll('.*_TIME_', '') + '.gfa' : f
                    }
                ]
            ]
            // beforeScript = { "workdir=\$PWD; cd ${launchDir}; dir='${params.out_dir}/timepoints/${sample_id.replaceAll('_TIME_.*', '')}/assembly/${sample_id.replaceAll('.*_TIME_', '')}/'; mkdir -p \$dir; echo 1 > \$dir/assembly.txt; cd \$workdir" }
            maxForks = params.watch_cpus.intdiv(16)
            ext.args = '-i 0'
        }
        withName: medaka {
            publishDir = [
                [
                    path: { "${params.out_dir}/timepoints/${sample_id.replaceAll('_TIME_.*', '')}/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    saveAs: { "${sample_id}.polished.fasta" }
                ],
                [
                    path: { "${params.out_dir}/latest/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    saveAs: { "${sample_id}.polished.fasta" }
                ]   
            ]
            maxForks = params.watch_cpus.intdiv(8)
        }
        withName: medaka_gpu {
            publishDir = [
                [
                    path: { "${params.out_dir}/timepoints/${sample_id.replaceAll('_TIME_.*', '')}/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    saveAs: { "${sample_id}.polished.fasta" }
                ],
                [
                    path: { "${params.out_dir}/latest/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    saveAs: { "${sample_id}.polished.fasta" }
                ]
            ]
            maxForks = params.watch_cpus.intdiv(8)
        }
        withName: rename_FASTA {
            publishDir = [
                [
                    path: { "${params.out_dir}/timepoints/${sample_id.replaceAll('_TIME_.*', '')}/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy"
                ],
                [
                    path: { "${params.out_dir}/latest/assembly/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    saveAs: { sample_id.replaceAll('.*_TIME_', '') + ".unpolished.fasta" }
                ]
            ]
        }
        withName: centrifuge {
            publishDir = [
                [
                    path: { "${params.out_dir}/timepoints/${sample_id.replaceAll('_TIME_.*', '')}/qc/centrifuge/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    pattern: "*.kraken.report"
                ],
                [
                    path: { "${params.out_dir}/latest/taxonomy_class/${sample_id.replaceAll('.*_TIME_', '')}/" },
                    mode: "copy",
                    pattern: "*.kraken.report",
                    saveAs: { "taxonomy_class.tsv" }
                ]
            ]
            maxForks = params.watch_cpus.intdiv(16)
        }
        withName: nanoq {
            publishDir = [
                    path: { "${params.out_dir}/report_data/fastq/" },
                    mode: "symlink"//,
                    // saveAs: { 
                    //     f -> 
                    //     id = f.replaceAll('.filt.fastq.*', '').replaceAll('.*_TIME_', '')
                    //     id + ".fastq.gz"
                    // }
                ]
        }
        withName: fastq_check {
            maxForks = params.watch_cpus.intdiv(8)
        }
        withName: krona {
            publishDir = [
                path: { "${params.out_dir}" },
                mode: "copy"
            ]
        }
        withName: combine_res {
            publishDir = [
                path: { "${params.out_dir}/" },
                mode: "copy",
                saveAs: { 'analysis_results.csv' }
            ]
        }
        withName: nanocomp_dir {
            publishDir = [
                [
                    path: { "$params.out_dir" }, 
                    mode: "copy", 
                    pattern: "*.html", 
                    saveAs: { "fastq_report.html" }
                ],
                [
                    path: "$params.out_dir"+"/latest/fastq_qual/", 
                    mode: "copy", 
                    pattern: "*.{txt,gz}", 
                    saveAs: { 
                        fn ->
                            if ( fn.endsWith("txt") ) { 
                                "NanoComp_stats.tsv"
                            } else { "NanoComp_data.tsv.gz" }
                    }
                ]
            ]
        }

    } else {

        withName: centrifuge {
            publishDir = [
                path: { "$params.out_dir"+"/qc/centrifuge/" },
                mode: "copy",
                pattern: "*.{krona,kraken.report}"
            ]
        }
        withName: flye {
            publishDir = [
                path: { "$params.out_dir"+"/assembly/${sample_id}" },
                mode: "copy",
                pattern: "*.{log,txt,gfa,fasta}",
                saveAs: { f ->
                    if ( f.endsWith('fasta') ) {
                        "${sample_id}.unpolished.fasta"
                    } else {
                        f
                    }
                }
            ]
        }
        withName: metaflye {
            publishDir = [
                path: { "$params.out_dir"+"/assembly/${sample_id}" },
                mode: "copy",
                pattern: "*.{log,txt,gfa,fasta}",
                saveAs: { f ->
                    if ( f.endsWith('fasta') ) {
                        "${sample_id}.unpolished.fasta"
                    } else {
                        f
                    }
                }
            ]
        }
        withName: medaka_gpu {
            publishDir = [
                path: { "${params.out_dir}/assembly/${sample_id}" },
                mode: "copy",
                saveAs: { "${sample_id}.polished.fasta" }
            ]
        }
        withName: medaka {
            publishDir = [
                path: { "${params.out_dir}/assembly/${sample_id}" },
                mode: "copy",
                saveAs: { "${sample_id}.polished.fasta" }
            ]
        }
        withName: nanocomp {
            publishDir = [
                [
                    path: { "$params.out_dir"+"/reports/" }, 
                    mode: "copy", 
                    pattern: "*.html", 
                    saveAs: { "NanoComp_report.html" }
                ],
                [
                    path: "$params.out_dir"+"/qc/nanocomp/", 
                    mode: "copy", 
                    pattern: "*.{txt,gz}", 
                    saveAs: { 
                        fn ->
                            if ( fn.endsWith("txt") ) { 
                                "NanoComp_stats.tsv"
                            } else { "NanoComp_data.tsv.gz" }
                    }
                ]
            ]
        }
    }
}
    
