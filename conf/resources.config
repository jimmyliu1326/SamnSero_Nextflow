process {
  withName: 'nanopore:porechop' {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 3
  }
  withName: 'nanopore:ASSEMBLY_nanopore:dragonflye' {
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'ignore' }
    maxRetries = 3
  }
  withName: 'nanopore:ASSEMBLY_nanopore:flye' {
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'ignore' }
    maxRetries = 3
  }
  withName: 'nanopore:ASSEMBLY_nanopore:metaflye' {
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'ignore' }
    maxRetries = 3
  }
  withName: 'nanopore:ASSEMBLY_nanopore:medaka' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 3
  }
  withName: 'nanopore:ASSEMBLY_nanopore:medaka_gpu' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 3
  }
  withName: 'nanopore:ASSEMBLY_nanopore:rename_FASTA' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'nanopore:combine' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt , 'memory' ) }
    errorStrategy = 'retry'
    maxRetries = 5
  }
  withName: 'nanopore:combine_watch' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt , 'memory' ) }
    errorStrategy = 'retry'
    maxRetries = 5
  }
  withName: 'nanopore:nanoq' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 3
  }
  withName: 'post_asm_process:ANNOT:abricate' {
    cpus = { check_max( 3, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:ANNOT:abricate_summary' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:ANNOT:aggregate_cctyper' {
    cpus = { check_max( 2, 'cpus' ) }
  }
  withName: 'post_asm_process:ANNOT:aggregate_mob_suite' {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName: 'post_asm_process:ANNOT:aggregate_rgi' {
    cpus = { check_max( 2, 'cpus' ) }
  }
  withName: 'post_asm_process:ANNOT:cctyper' {
    cpus = { check_max( 3, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:ANNOT:mob_suite' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 2.GB,   'memory' ) }
  }
  withName: 'post_asm_process:ANNOT:mob_suite_merge' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:ANNOT:mob_suite_summary' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:ANNOT:rgi' {
    cpus = { check_max( 3, 'cpus' ) }
    memory = { check_max( 2.GB,   'memory' ) }
  }
  withName: 'post_asm_process:ANNOT:rgi_summary' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:ANNOT:tnblast' {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 2.GB, 'memory' ) }
  }
  withName: 'post_asm_process:ASSEMBLY_QC:aggregate_quast' {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName: 'post_asm_process:ASSEMBLY_QC:checkm' {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt , 'memory' ) }
    time = { check_max( 4.h * task.attempt , 'time' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 6
  }
  withName: 'post_asm_process:ASSEMBLY_QC:checkm_single' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt , 'memory' ) }
    time = { check_max( 2.h * task.attempt , 'time' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 6
  }
  withName: 'post_asm_process:ASSEMBLY_QC:quast' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 3
  }
  withName: 'post_asm_process:READ_QC:centrifuge' {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt , 'memory' ) }
    time = { check_max( 18.h, 'time' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 3
  }
  withName: 'post_asm_process:READ_QC:krona' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:READ_QC:nanocomp' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 3
  }
  withName: 'post_asm_process:READ_QC:seqkit_fx2tab' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 4.GB, 'memory' ) }
  }
  withName: 'post_asm_process:READ_QC:target_reads_aggregate' {
    cpus = { check_max( 2, 'cpus' ) }
  }
  withName: 'post_asm_process:READ_QC:target_reads_xtract' {
    cpus = { check_max( 1, 'cpus' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'ignore' }
    memory = { check_max( 4.GB * task.attempt , 'memory' ) }
    maxRetries = 5
  }
  withName: 'taxonkit_name2taxid' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:SEROTYPING:aggregate_sistr' {
    cpus = { check_max( 2, 'cpus' ) }
  }
  withName: 'post_asm_process:SEROTYPING:sistr' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:annot_report' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 2.GB, 'memory' ) }
    errorStrategy = 'ignore'
  }
  withName: 'post_asm_process:combine_res' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:qc_report' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max(  4.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 4
  }
  withName: 'post_asm_process:MG_BIN:rename_CTG' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }  
  }
  withName: 'post_asm_process:MG_BIN:rename_FASTA' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:MG_BIN:vamb_concatenate' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 4.GB, 'memory' ) }
  }
  withName: 'post_asm_process:MG_BIN:vamb' {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB, 'memory' ) }
  }
  withName: 'post_asm_process:MG_BIN:vamb_gpu' {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB, 'memory' ) }
  }
  withName: 'post_asm_process:MG_BIN:samtools_view' {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 4.GB, 'memory' ) }
  }
  withName: 'post_asm_process:MG_BIN:minimap2_map_ont' {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 4.GB, 'memory' ) }
  }
  withName: 'post_asm_process:MG_BIN:pubmlst_species_id' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:XTRACT_TARGET_CTGS:taxonkit_rank2name' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 1.GB, 'memory' ) }
  }
  withName: 'post_asm_process:XTRACT_TARGET_CTGS:MMSEQS2_EASY_TAXONOMY' {
    memory = { check_max( 32.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 3
  }
  withName: 'post_asm_process:SEROTYPING:aggregate_sistr_watch' {
    cpus = { check_max( 1, 'cpus' ) }
    errorStrategy = 'ignore'
  }
  withName: 'post_asm_process:READ_QC:aggregate_kreport_watch' {
    cpus = { check_max( 1, 'cpus' ) }
    errorStrategy = 'ignore'
  }
  withName: 'post_asm_process:READ_QC:aggregate_kreport_split' {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName: 'post_asm_process:READ_QC:aggregate_krona_watch' {
    cpus = { check_max( 1, 'cpus' ) }
    errorStrategy = 'ignore'
  }
  withName: 'post_asm_process:READ_QC:aggregate_krona_split' {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName: 'post_asm_process:READ_QC:target_reads_aggregate_watch' {
    cpus = { check_max( 1, 'cpus' ) }
    errorStrategy = 'ignore'
  }
  withName: 'post_asm_process:ASSEMBLY_QC:aggregate_quast_watch' {
    cpus = { check_max( 1, 'cpus' ) }
    errorStrategy = 'ignore'
  }
  withName: 'post_asm_process:ASSEMBLY_QC:aggregate_checkm_watch' {
    cpus = { check_max( 1, 'cpus' ) }
    errorStrategy = 'ignore'
  }
  withName: 'post_asm_process:report_res_aggregate' {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName: 'post_asm_process:qc_report_watch' {
    cpus = { check_max( 1, 'cpus' ) }
    errorStrategy = 'ignore'
  }
  withName: 'rename_FASTQ' {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName: 'fastq_check' {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName: 'post_asm_process:ANNOT:rgi_summary' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt , 'memory' ) }
    errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 5
  }
}